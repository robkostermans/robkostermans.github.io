{"version":3,"sources":["prismic-configuration.js","Preview.js","NotFound.js","container/home/index.js","Help.js","App.js","PrismicApp.js","index.js"],"names":["prismic_configuration","apiEndpoint","linkResolver","doc","type","concat","uid","Preview","_this","this","props","prismicCtx","params","qs","parse","location","search","slice","api","previewSession","token","PrismicConfig","then","url","history","push","react_default","a","createElement","React","Component","NotFound","Home","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","focusItem","focusLock","notFound","fetchPage","focus","createRef","handleFocus","bind","assertThisInitialized","handleLock","prevProps","setFocus","toolbar","getSingle","setState","event","console","log","currentTarget","itemToFocusOnData","getBoundingClientRect","current","animate","width","height","transform","x","y","duration","fill","_this2","refIndex","Fragment","ref","onClick","className","elem","tabIndex","onMouseOver","data-wio-id","id","PrismicReact","RichText","asText","data","title","render","intro","Help","$","document","ready","each","i","block","hljs","highlightBlock","repositoryInfo","getRepositoryInfo","renderHeader","renderBootstrapSection","renderCustomTypeSection","renderFirstPageSection","renderRouteSection","renderTemplateSection","_PrismicConfig$apiEnd","match","_PrismicConfig$apiEnd2","slicedToArray","name","isConfigured","_ref","repoLink","href","target","rel","src","alt","renderNavbar","App","BrowserRouter","Switch","Route","exact","path","routeProps","home_Home","assign","component","Preview_Preview","PrismicApp","buildContext","catch","e","error","maybeCurrentExperiment","currentExperiment","window","PrismicToolbar","startExperiment","googleId","setup","accessToken","Prismic","endpoint","refreshToolbar","src_App","ReactDOM","PrismicApp_PrismicApp","getElementById"],"mappings":"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","file":"static/js/main.8bdd317c.chunk.js","sourcesContent":["export default {\r\n\r\n  apiEndpoint: 'https://robkostermans.prismic.io/api/v2',\r\n\r\n  // -- Access token if the Master is not open\r\n  // accessToken: 'xxxxxx',\r\n\r\n  // OAuth\r\n  // clientId: 'xxxxxx',\r\n  // clientSecret: 'xxxxxx',\r\n\r\n  // -- Links resolution rules\r\n  // This function will be used to generate links to Prismic.io documents\r\n  // As your project grows, you should update this function according to your routes\r\n  linkResolver(doc) {\r\n    if (doc.type === 'page') return `/page/${doc.uid}`;\r\n    return '/';\r\n  },\r\n};\r\n","import React from 'react';\r\nimport qs from 'qs';\r\nimport PrismicConfig from './prismic-configuration';\r\n\r\nexport default class Preview extends React.Component {\r\n  componentDidUpdate() {\r\n    if(this.props.prismicCtx) {\r\n      const params = qs.parse(this.props.location.search.slice(1));\r\n      this.props.prismicCtx.api.previewSession(params.token, PrismicConfig.linkResolver, '/').then((url) => {\r\n        this.props.history.push(url);\r\n      });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return <p>Loading previews...</p>;\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nexport default function NotFound() {\r\n  return <div>404 not found</div>;\r\n}\r\n","import React from 'react';\r\nimport NotFound from '../../NotFound';\r\nimport PrismicReact from 'prismic-reactjs';\r\n\r\nimport './style.scss';\r\n\r\n// Declare your component\r\nexport default class Home extends React.Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\tfocusItem: null,\r\n\t\t\tfocusLock: false,\r\n\t\t\tdoc: null,\r\n\t\t\tnotFound: false\r\n\t\t};\r\n\t\tif (props.prismicCtx) {\r\n\t\t\tthis.fetchPage(props);\r\n\t\t}\r\n\t\tthis.focus = React.createRef();\r\n\t\tthis.handleFocus = this.handleFocus.bind(this);\r\n\t\tthis.handleLock = this.handleLock.bind(this);\r\n\t}\r\n\r\n\tasync componentDidUpdate(prevProps) {\r\n\t\tthis.setFocus();\r\n\t\tthis.props.prismicCtx.toolbar();\r\n\t\t// We fetch the page only after it's ready to query the api\r\n\t\tif (!prevProps.prismicCtx) {\r\n\t\t\tawait this.fetchPage(this.props);\r\n\t\t\tthis.setFocus();\r\n\t\t}\r\n\t}\r\n\tcomponentDidMount() {}\r\n\tasync fetchPage(props) {\r\n\t\tif (props.prismicCtx) {\r\n\t\t\tconst doc = await props.prismicCtx.api.getSingle('home');\r\n\t\t\tif (doc) {\r\n\t\t\t\t// We put the retrieved content in the state as a doc variable\r\n\t\t\t\tthis.setState({ doc });\r\n\t\t\t} else {\r\n\t\t\t\t// We changed the state to display error not found if no matched doc\r\n\t\t\t\tthis.setState({ notFound: !doc });\r\n\t\t\t}\r\n\t\t\t// // We are using the function to get a document by its uid\r\n\t\t\t// return props.prismicCtx.api.getByUID('home', 'home', {}, (err, doc) => {\r\n\r\n\t\t\t// });\r\n\t\t}\r\n\t\treturn null;\r\n\t}\r\n\r\n\thandleLock(event) {\r\n\t\tthis.setState({\r\n\t\t\tfocusLock: !this.state.focusLock\r\n\t\t});\r\n\t\tconsole.log('herro', this.state.focusLock);\r\n\t}\r\n\r\n\thandleFocus(event) {\r\n\t\tthis.setState({\r\n\t\t\tfocusItem: event.currentTarget\r\n\t\t});\r\n\t}\r\n\r\n\tsetFocus() {\r\n\t\tif (this.state.focusItem === null || this.state.focusLock === true) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t//const focusData = this.focus.current.getBoundingClientRect()\r\n\t\tconst itemToFocusOnData = this.state.focusItem.getBoundingClientRect();\r\n\r\n\t\tthis.focus.current.animate(\r\n\t\t\t[\r\n\t\t\t\t// keyframes\r\n\t\t\t\t//{ transform: `width: translate(${focusData.x}px,${focusData.y}px)` },\r\n\t\t\t\t{\r\n\t\t\t\t\twidth: `${itemToFocusOnData.width}px`,\r\n\t\t\t\t\theight: `${itemToFocusOnData.height}px`,\r\n\t\t\t\t\ttransform: `translate(${itemToFocusOnData.x}px, ${itemToFocusOnData.y}px)`\r\n\t\t\t\t}\r\n\t\t\t],\r\n\t\t\t{\r\n\t\t\t\t// timing options\r\n\t\t\t\tduration: 150,\r\n\t\t\t\tfill: 'forwards'\r\n\t\t\t\t//iterations: 1\r\n\t\t\t}\r\n\t\t);\r\n\t}\r\n\r\n\trender() {\r\n\t\tlet refIndex = 0;\r\n\t\tif (this.state.doc) {\r\n\t\t\treturn (\r\n\t\t\t\t<React.Fragment>\r\n\t\t\t\t\t<div ref={this.focus} onClick={this.handleLock} className=\"focus\" />\r\n\t\t\t\t\t<main>\r\n\t\t\t\t\t\t<section\r\n\t\t\t\t\t\t\tref={elem => {\r\n\t\t\t\t\t\t\t\tthis[`focusItem${refIndex++}`] = elem;\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\ttabIndex=\"0\"\r\n\t\t\t\t\t\t\tonClick={this.handleLock}\r\n\t\t\t\t\t\t\tonMouseOver={this.handleFocus}\r\n\t\t\t\t\t\t\tdata-wio-id={this.state.doc.id}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t{/* This is how to insert a Rich Text field as plain text */}\r\n\t\t\t\t\t\t\t<h1>{PrismicReact.RichText.asText(this.state.doc.data.title)}</h1>\r\n\t\t\t\t\t\t\t{/* This is how to insert a Rich Text field into your template as html */}\r\n\t\t\t\t\t\t\t{PrismicReact.RichText.render(this.state.doc.data.intro, this.props.prismicCtx.linkResolver)}\r\n\t\t\t\t\t\t</section>\r\n\r\n\t\t\t\t\t\t<section\r\n\t\t\t\t\t\t\tref={elem => {\r\n\t\t\t\t\t\t\t\tthis[`focusItem${refIndex++}`] = elem;\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\ttabIndex=\"1\"\r\n\t\t\t\t\t\t\tonClick={this.handleLock}\r\n\t\t\t\t\t\t\tonMouseOver={this.handleFocus}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<div>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse ac sem a est condimentum pharetra et vitae orci. Morbi sit amet metus nisl. Donec rhoncus a tortor efficitur sagittis. Ut eu interdum velit. Duis ornare libero nec nunc sagittis pellentesque. Maecenas sit amet nisl odio. Aliquam erat volutpat. Phasellus ac ante suscipit, auctor augue et, posuere nulla.</div>\r\n\t\t\t\t\t\t</section>\r\n\r\n\t\t\t\t\t\t<section\r\n\t\t\t\t\t\t\tref={elem => {\r\n\t\t\t\t\t\t\t\tthis[`focusItem${refIndex++}`] = elem;\r\n\t\t\t\t\t\t\t}}\r\n\t\t\t\t\t\t\ttabIndex=\"2\"\r\n\t\t\t\t\t\t\tonClick={this.handleLock}\r\n\t\t\t\t\t\t\tonMouseOver={this.handleFocus}\r\n\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t<div>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse ac sem a est condimentum pharetra et vitae orci. Morbi sit amet metus nisl. Donec rhoncus a tortor efficitur sagittis. Ut eu interdum velit. Duis ornare libero nec nunc sagittis pellentesque. Maecenas sit amet nisl odio. Aliquam erat volutpat. Phasellus ac ante suscipit, auctor augue et, posuere nulla.</div>\r\n\t\t\t\t\t\t</section>\r\n\t\t\t\t\t</main>\r\n\t\t\t\t</React.Fragment>\r\n\t\t\t);\r\n\t\t} else if (this.state.notFound) {\r\n\t\t\treturn <NotFound />;\r\n\t\t}\r\n\t\treturn <h1>Loading</h1>;\r\n\t}\r\n}\r\n","import React from 'react';\r\nimport $ from 'jquery';\r\nimport hljs from 'highlight.js';\r\nimport PrismicConfig from './prismic-configuration';\r\n\r\nexport default class Help extends React.Component {\r\n\r\n  static getRepositoryInfo() {\r\n    const repoRegexp = /^(https?:\\/\\/([-\\w]+)\\.[a-z]+\\.(io|dev|test))\\/api(\\/v2)?$/;\r\n    const [, url, name] = PrismicConfig.apiEndpoint.match(repoRegexp);\r\n    const isConfigured = name !== 'your-repo-name';\r\n    return { url, name, isConfigured };\r\n  }\r\n\r\n  static renderNavbar({ url, name, isConfigured }) {\r\n    const repoLink = isConfigured\r\n      ? <a href={url} target=\"_blank\" rel=\"noopener noreferrer\"><strong>Go to {name}</strong></a>\r\n      : <a href=\"#config\"><strong>Configure a repository</strong></a>;\r\n\r\n    return (\r\n      <nav>\r\n        {repoLink}\r\n        <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://prismic.io/docs/reactjs/getting-started/getting-started-from-scratch\" className=\"doc\">Documentation<img src=\"images/open.svg\" alt=\"\" /></a>\r\n      </nav>\r\n    );\r\n  }\r\n\r\n  static renderHeader(repositoryInfo) {\r\n    return (\r\n      <header>\r\n        {Help.renderNavbar(repositoryInfo)}\r\n        <div className=\"wrapper\">\r\n          <img src=\"images/rocket.svg\" alt=\"\" />\r\n          <h1>High five, you deserve it!</h1>\r\n          <p>Grab a well deserved cup of coffee, you're five steps away from creating a page with dynamic content.</p>\r\n        </div>\r\n        <div className=\"hero-curve\" />\r\n        <div className=\"flip-flap\">\r\n          <div className=\"flipper\">\r\n            <div className=\"guide\">\r\n              <ul>\r\n                <li><a href=\"#config\"><span className=\"number\">1</span>Bootstrap your project<img src=\"images/arrow.svg\" alt=\"\" /></a></li>\r\n                <li><a href=\"#custom-type\"><span className=\"number\">2</span>Setup a \"Page\" Custom Type<img src=\"images/arrow.svg\" alt=\"\" /></a></li>\r\n                <li><a href=\"#first-page\"><span className=\"number\">3</span>Create your first page<img src=\"images/arrow.svg\" alt=\"\" /></a></li>\r\n                <li><a href=\"#query\"><span className=\"number\">4</span>Create a route and retrieve content<img src=\"images/arrow.svg\" alt=\"\" /></a></li>\r\n                <li><a href=\"#done\"><span className=\"number\">5</span>Fill a template<img src=\"images/arrow.svg\" alt=\"\" /></a></li>\r\n              </ul>\r\n            </div>\r\n            <div className=\"gif\" />\r\n          </div>\r\n        </div>\r\n      </header>\r\n    );\r\n  }\r\n\r\n  static renderBootstrapSection() {\r\n    return (\r\n      <div>\r\n        <h3 id=\"config\"><span className=\"number\">1</span>Bootstrap your project</h3>\r\n        <p>\r\n          If you haven't yet, create a Prismic content repository. A repository is where your website’s content will live. Simply <a href=\"https://prismic.io/#create\" target=\"_blank\" rel=\"noopener noreferrer\">create one</a> by choosing a repository name and a plan. We've got a variety of plans including our favorite, Free!\r\n        </p>\r\n        <h4>Add the repository URL to your configuration</h4>\r\n        <p>Replace the repository url in your prismic configuration with <code className=\"tag\">your-repo-name.prismic.io</code></p>\r\n        <div className=\"source-code\">\r\n          <pre><code className=\"js\">{`// In src/prismic-configuration.js\r\napiEndpoint: \"https://your-repo-name.prismic.io/api/v2\",`}\r\n          </code></pre>\r\n        </div>\r\n        <h4>Add the repository URL to your index.html</h4>\r\n        <p>Replace the repository url in your prismic configuration with <code className=\"tag\">your-repo-name.prismic.io</code></p>\r\n        <div className=\"source-code\">\r\n          <pre><code className=\"js\">{`// In public/index.html\r\n<script>\r\n  window.prismic = {\r\n    endpoint: 'https://your-repo-name.prismic.io/api/v2'\r\n  };\r\n</script>`}\r\n          </code></pre>\r\n        </div>\r\n        <p>This will ensure that your edit buttons and previews work properly.</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  static renderCustomTypeSection() {\r\n    return (\r\n      <div>\r\n        <h3 id=\"custom-type\"><span className=\"number\">2</span>Setup a \"Page\" Custom Type</h3>\r\n        <p></p>\r\n        <h4>Create a new Custom Type</h4>\r\n        Go to the repository backend you've just created. Navigate to the \"Custom Types\" section (icon on the left navbar) and create a new Repeatable Type. For this tutorial let's name it \"Page\".\r\n        <span className=\"note\">Before clicking on button \"Create new custom type\", make sure that the system automatically assigns this an API ID of <code className=\"tag\">page</code>, because we'll use it later for querying the page.</span>\r\n        Once the \"Page\" Custom Type is created, we have to define how we want to model it. Click on \"JSON editor\" (right sidebar) and paste the following JSON data into the Custom Type JSON editor. When you're done, hit the <code className=\"tag\">Save</code> button.\r\n        <p></p>\r\n        <div className=\"source-code\">\r\n          <pre>\r\n            <code className=\"json\">{`{\r\n  \"Main\" : {\r\n    \"uid\" : {\r\n      \"type\" : \"UID\",\r\n      \"config\" : {\r\n        \"placeholder\" : \"UID\"\r\n      }\r\n    },\r\n    \"title\" : {\r\n      \"type\" : \"StructuredText\",\r\n      \"config\" : {\r\n        \"single\" : \"heading1\",\r\n        \"placeholder\" : \"Title...\"\r\n      }\r\n    },\r\n    \"description\" : {\r\n      \"type\" : \"StructuredText\",\r\n      \"config\" : {\r\n        \"multi\" : \"paragraph,em,strong,hyperlink\",\r\n        \"placeholder\" : \"Description...\"\r\n      }\r\n    },\r\n    \"image\" : {\r\n      \"type\" : \"Image\"\r\n    }\r\n  }\r\n}`}\r\n              </code>\r\n              </pre>\r\n          </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  static renderFirstPageSection() {\r\n    return (\r\n      <div>\r\n        <h3 id=\"first-page\"><span className=\"number\">3</span>Create your first page</h3>\r\n        <p>\r\n          The \"Page\" Custom Type you've just created contains a title, a paragraph, an image and a UID (unique identifier). Now it is time to fill in your first page!\r\n          <br/><br/>\r\n          Go to \"Content,\" hit \"New,\" &amp; fill in the corresponding fields. \r\n          <span className=\"note\">Note the value you filled in the UID field, because it will be a part of the page URL. For this example enter the value, <code className=\"tag\">first-page</code>.</span>\r\n          When you're done, hit <code className=\"tag\">Save</code> then <code className=\"tag\">Publish</code>.\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  static renderRouteSection() {\r\n    return (\r\n      <div>\r\n        <h3 id=\"query\"><span className=\"number\">4</span>Create a route and retrieve content</h3>\r\n        <p>\r\n          You need to create the Page component and fetch your content.\r\n          We will query the page by its UID right before the component is mounted. Then we will update your component state.\r\n          <br/><br/>\r\n          Create a new file <code className=\"tag\">src/Page.js</code> and paste the following code into your new file.\r\n        </p>\r\n        <div className=\"source-code\">\r\n          <pre><code className=\"jsx\">{`// In src/Page.js\r\n\r\nimport React from 'react';\r\nimport NotFound from './NotFound';\r\nimport PrismicReact from 'prismic-reactjs';\r\n\r\n// Declare your component\r\nexport default class Page extends React.Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      doc: null,\r\n      notFound: false,\r\n    }\r\n    if (props.prismicCtx) {\r\n      this.fetchPage(props);\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    this.props.prismicCtx.toolbar();\r\n    // We fetch the page only after it's ready to query the api\r\n    if (!prevProps.prismicCtx) {\r\n      this.fetchPage(this.props);\r\n    }\r\n  }\r\n\r\n  fetchPage(props) {\r\n    if (props.prismicCtx) {\r\n      // We are using the function to get a document by its uid\r\n      return props.prismicCtx.api.getByUID('page', props.match.params.uid, {}, (err, doc) => {\r\n        if (doc) {\r\n          // We put the retrieved content in the state as a doc variable\r\n          this.setState({ doc });\r\n        } else {\r\n          // We changed the state to display error not found if no matched doc\r\n          this.setState({ notFound: !doc });\r\n        }\r\n      });\r\n    }\r\n    return null;\r\n  }\r\n\r\n  render() {\r\n    // We will fill in this section in Step 5...\r\n    return null;\r\n  }\r\n}`}\r\n          </code></pre>\r\n        </div>\r\n        <p>\r\n          To discover all the functions you can use to query your documents go to <a href=\"https://prismic.io/docs/reactjs/query-the-api/how-to-query-the-api\" rel=\"noopener noreferrer\" target=\"_blank\">the prismic documentation</a>.\r\n        </p>\r\n        <p>\r\n          Now you need to link your component to a URL by defining a route.\r\n          <br />\r\n          In the following example we'll link a <code className=\"tag\">/page/:uid</code> URL to the new <code className=\"tag\">Page</code> component.\r\n        </p>\r\n        <div className=\"source-code\">\r\n          <pre><code className=\"jsx\">{`// In src/App.js\r\n\r\n// Add this to list of imports at the top of the page\r\nimport Page from './Page';\r\n\r\n// Add the following route in your Router component before the NotFound route\r\n<Route exact path=\"/page/:uid\" render={routeProps => <Page {...routeProps} prismicCtx={props.prismicCtx} />} />`}\r\n          </code></pre>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  static renderTemplateSection() {\r\n    return (\r\n      <div>\r\n        <h3 id=\"done\"><span className=\"number\">5</span>Fill a template</h3>\r\n        <p>\r\n          Now all that's left to be done is to display your component using the <code className=\"tag\">render</code> function.\r\n        </p>\r\n        <p>\r\n          You can get the content using the <code className=\"tag\">doc</code> state variable we defined above. All the content fields are accessed using their <code className=\"tag\">API-IDs</code>.\r\n        </p>\r\n        <div className=\"source-code\">\r\n          <pre><code>{`// In src/Page.js\r\n\r\nrender() {\r\n  if (this.state.doc) {\r\n    return (\r\n      <div data-wio-id={this.state.doc.id}>\r\n        {/* This is how to get an image into your template */}\r\n        <img alt=\"cover\" src={this.state.doc.data.image.url} />\r\n        {/* This is how to insert a Rich Text field as plain text */}\r\n        <h1>{PrismicReact.RichText.asText(this.state.doc.data.title)}</h1>\r\n        {/* This is how to insert a Rich Text field into your template as html */}\r\n        {PrismicReact.RichText.render(this.state.doc.data.description, this.props.prismicCtx.linkResolver)}\r\n      </div>\r\n    );\r\n  } else if (this.state.notFound) {\r\n    return <NotFound />;\r\n  }\r\n  return <h1>Loading</h1>;\r\n}`}\r\n          </code></pre>\r\n        </div>\r\n        <p>In your browser go to <a href=\"/page/first-page\">localhost:3000/page/first-page</a> and you're done! You've officially created a page that pulls content from Prismic.<br/></p>\r\n        <p>\r\n          To discover how to get all the fields go to <a href=\"https://prismic.io/docs/reactjs/rendering/the-response-object\" rel=\"noopener noreferrer\" target=\"_blank\">the prismic documentation</a>.\r\n        </p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  componentDidMount() {\r\n    $(document).ready(() => {\r\n      $('pre code').each((i, block) => {\r\n        hljs.highlightBlock(block);\r\n      });\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const repositoryInfo = Help.getRepositoryInfo();\r\n    return (\r\n      <div id=\"prismic-help\">\r\n        {Help.renderHeader(repositoryInfo)}\r\n        <section>\r\n          <p>\r\n            This is a help page included in your project, it has a few useful links and example snippets to help you getting started.\r\n            You can access this any time by pointing your browser to localhost:3000/help.\r\n          </p>\r\n          <h2>Five more steps:</h2>\r\n          {Help.renderBootstrapSection()}\r\n          {Help.renderCustomTypeSection()}\r\n          {Help.renderFirstPageSection()}\r\n          {Help.renderRouteSection()}\r\n          {Help.renderTemplateSection()}\r\n        </section>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport { BrowserRouter as Router, Route, Switch, Redirect } from 'react-router-dom';\r\nimport Preview from './Preview';\r\nimport Home from './container/home';\r\nimport Help from './Help';\r\nimport NotFound from './NotFound';\r\n\r\nconst App = props => (\r\n\t<Router>\r\n\t\t<Switch>\r\n\t\t\t{/* <Redirect exact from=\"/\" to=\"/home\" /> */}\r\n\t\t\t<Route exact path=\"/\" render={routeProps => <Home {...routeProps} prismicCtx={props.prismicCtx} />} />\r\n\t\t\t<Route exact path=\"/help\" component={Help} />\r\n\t\t\t<Route exact path=\"/preview\" render={routeProps => <Preview {...routeProps} prismicCtx={props.prismicCtx} />} />\r\n\t\t\t<Route component={NotFound} />\r\n\t\t</Switch>\r\n\t</Router>\r\n);\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport 'whatwg-fetch';\r\nimport Prismic from 'prismic-javascript';\r\nimport PrismicConfig from './prismic-configuration';\r\nimport App from './App';\r\n\r\nexport default class PrismicApp extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { prismicCtx: null };\r\n    this.buildContext().then((prismicCtx) => {\r\n      this.setState({ prismicCtx });\r\n    }).catch((e) => {\r\n      console.error(`Cannot contact the API, check your prismic configuration:\\n${e}`);\r\n    });\r\n  }\r\n\r\n  refreshToolbar() {\r\n    const maybeCurrentExperiment = this.api.currentExperiment();\r\n    if (maybeCurrentExperiment) {\r\n      window.PrismicToolbar.startExperiment(maybeCurrentExperiment.googleId());\r\n    }\r\n    window.PrismicToolbar.setup(PrismicConfig.apiEndpoint);\r\n  }\r\n\r\n  buildContext() {\r\n    const accessToken = PrismicConfig.accessToken;\r\n    return Prismic.api(PrismicConfig.apiEndpoint, { accessToken }).then(api => ({\r\n      api,\r\n      endpoint: PrismicConfig.apiEndpoint,\r\n      accessToken,\r\n      linkResolver: PrismicConfig.linkResolver,\r\n      toolbar: this.refreshToolbar,\r\n    }));\r\n  }\r\n\r\n  render() {\r\n    return <App prismicCtx={this.state.prismicCtx} />;\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport PrismicApp from './PrismicApp';\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n  <PrismicApp />,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}